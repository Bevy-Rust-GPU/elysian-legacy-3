* Refactor domain types as trait impls Semantically similar to context, i.e. a set of types
  * Will avoid having to implement combinators over (Distance, D)
  * Should allow replacing (DistanceF32, (GradientF32, ()) with PosDistGrad
    * Feels like Input / Field / Output taking multiple values may complicate this

  DONE: Attempted, but ended up creating type aliases for lists,
        as Combine subtypes need to pattern-match an ADT in order to deconflict their impls

* Elide Input / Output / Field wrapping for API purposes
  * Structs still need to exist for ADT purposes
  * Need an ADT lifting function that can be called inside the Shr impl

  DONE: Implemented via shape builder wrapper and Shr operator

* Formalize rasterize, ascii, image, viuer into new ADT subtype
  * Interpreter is the wrong term
  * Semantically a Context -> Context operation
    * Similar to domain-lifted Input / Output / Field functions,
      and composable with them
  * Supertype of all existing ADT ops?
    * Devil's advocate says this is overcomplicated and should be omitted
      in favour of simple function composition
      * However, it's still useful as ADT for the following reasons:
        * Chaining multiple actions within a context (i.e. nesting inside Shape, Combine)
        * Use of output within a context
          * ex:
            Texture mapping via Raster + Uv + Color
            Conversion to a mesh for LOD / optimization purposes under software rasterization
            Rendering generated ascii as distance field characters
            Using texture lookup as an alternative to domain evaluation
        * Breaking specific entries out of a context to leave the ADT and continue via simple composition

  DONE: Implemented Modify as an ADT unit, but not useful for rasterize etc
        since they evaluate an ADT rather than modifying a context.
        However, this realizes Get, Set and related lifted functions as Modify subtypes.

* Make Combine operation types symbolic
  * Lift via trait, similar to domain functions
  * Allows the ADT to remain a Free structure
  * Allows formalization of interpreters over free structure

  DONE: Combine ops are now lifted into the register machine interpreter via the LiftCombine trait

* Strengthen Input / Field / Output encoding
  * Create specific traits to replace Domain
    * LiftInput / LiftOutput / LiftField
    * Allows relating of open symbol types to closed ADT wrappers
  * Feels like it relates to a prospective output type encoding,
    since the promise is that A flows through Inputs,
    is transformed into B by Field, then flows through Outputs
  
  DONE: Encoded via LiftAdt, since lifting into a wrapper and lifting into functions are distinct

* Parameter substitution for symbolic ADT inner types
  * Use functions instead of literals
    * Ex. Isosurface(Const(0.2)) instead of Isosurface(0.2)
  * Lift to context functions and evaluate as part of overall graph
  * Using functions allows arbitrary value transformation before use as input
  * Opens the door to functional reactive programming
    * Animation system by using time as a parameter
  * Can use Tagged types for named variables
    * ex. Tagged<ProjectionMatrix, Mat4> for raymarching, corresponding GetF<ProjectionMatrix>
    * May be able to replace DistanceF32 etc with true symbol types

  DONE: Parameters are now functions, and get lifted via LiftParam during evaluation

* ADT de/serialization via serde
  * Opens the door to an Elysian file type, FFI, etc

  DONE: Derived Serialize / Deserialize for all ADT structs and symbols

* Investigate generalized chaining framework based on Do / AdtBuilder
  * Could act as a viable alternative to Haskell's customizable operators
  * Use a single operator, or perhaps two to control associativity (i.e. Shl / Shr)
  * Use operation symbol types (ex. DoFmap, DoApply) to represent binary ops
  * Symbol types become a wrapper when operated on
  * Wrapper type applies binary op when operated on
  * Terminating type (ex. Done) to morph between wrappers or unwrap

  DONE: Implemented in t_funk::r#do

* Refactor operator overloads as Do subtypes

  DONE: Operator overloads replaced with Do-able trait operators

* Refactor ADT to split Input / Field / Output into a sub-ADT
  * Currently impractical to implement Monad etc
  * Input / Field / Output is essentially equivalent to Modify
  * May need to give the outer ADT a terminating type to satisfy Mempty

  DONE: Input / Field / Output are now resposible for enforcing their A -> B semantics

* Create macros to simplify creating identical impls for multiple ADT subclasses
  
  DONE: define_adt for defining multiple structs with the same attributes,
        impl_adt for creating identical impls for multiple structs at once

* Create dual of function attribute macro to lift functions to the type level
  * i.e. Annotate a generic function, get a trait, FunctionF and FunctionT types
  * Will also need a free-standing version to lift functions defined in other crates

  DONE: Implemented as t_funk::macros::lift, refactored existing impls accordingly

* Try to unify lifting functions so monad instance is transparent
  * i.e. Should be able to chain from ADT -> List -> ADT
         Should also be able to compose ADTs with a single Do function
  
  DONE: All ADT elements now lift in a unified manner.
        In addition, various core rust types can now lift transparently into paramters.

* Finalize Semigroup / Monoid instances for ADT

  DONE: Formalized Compose impls with doctests, so Semigroup and Monoid
        strictly offload to other classes, so are in and of themselves robust.

* Finalize Monad instance for ADT

  DONE: ADT can freely chain to a const list representation and back

* Investigate Applicative instance for ADT

  DONE: Implemented based on list instance, using Modify for Pure

* Refactor * -> Sequence composition to match on compatible types
  
  DONE: Implemented bounds on existing traits

* Investigate monad transformers
  * Using independently-provable building blocks seems idiomatic to FP
  * May be able to reduce explicit / arbitrary ADT into fundamental typeclasses and instances

  DONE: Seems useful for extending an explicit ADT with the properties of a given monad,
        but potentially clunky if used with primitives like Tagged as a first-class building block.
        Explicit ADT seems preferable for the sake of readable API,
        but a primitive building block approach has potential for IR transformations.

* Replace tuple-based vectors / points with glam structs

  DONE: Refactored associated wrappers to be unary, integrated glam types

* Rework Input / Field / Output as a free-standing abstraction,
  host inside Modify when lifting to ADT
  * Already semantically equavalent to Modify - i.e. a C -> C - just with stronger encoding

  DONE: Implementing double-lifting to go from symbol -> Shape -> ADT,
        refactored composition accordingly

* Investigate Alternative and MonadPlus
  * Combine subtypes seem like they have a strong relation to these typeclasses

  DONE: Useful to know about, but only useful in cases where the binary op is intuitive.
        This would be the case for Combine if it was just <A, B>,
        but being parametrized over an additional F prevents it.


* Refactor context lifting to be transparent
  * Currently occurs inside LiftDomainFunctions, which is called by LiftDomains
    * This makes it specific to shapes, when it should be specific to context modifiers
  * Run is the intuitive place to put it, but doesn't line up with existing idioms
    * GetContext / SetContext specifically
      * These specialize around using the t-funk Get / Set functions directly
    * Looked at splitting Run into Read / Write / Modify, but doesn't make sense.
      * Read is equivalent to piping the output of Get into some function
      * Write would have nowhere to get parameters from except the context
    * Primary goal here is to allow general modifiers the same
      automatic context lifting interface as shape functions,
      rather than having to use the Get / Set traits directly
      * In which case, reintroducing a Modify newtype as a sibling of Shape
        may be the best solution, since the levels of wrapping are currently lopsided
        w.r.t. open types.

  SKIPPED: Introducing Modify solves the underlying issue without needing
           to burden the ADT with full compositional responsibility.
           This is still desirable, but can be approached as a set of
           smaller more granular tasks later.


* Reimplement Modify as a sibling to Shape, Get and Set
  * Should be able to auto-lift functions to context in the same way

  DONE: Modify now lifts symbols and functions, and functions to domain functions

* Rework rasterize, ascii, viuer as functions that operate on a context
  * Intent is to make them part of the ADT, since rasterize takes a base context
  * Store Raster in context and operate on it instead of simply producing it
  * Modify(Rasterize(SHAPE_ADT)) << Modify(Ascii) << Modify(PrintLn)?
    * Would require storing String in context to hold Ascii output
    * Likewise with image types for Viuer
    * Notably, this would be a separate domain-specific context in each case
    * Allows composition, i.e. sampling the raster as a texture using the UVs of some parent shape
      * However, this would only make sense if statically evaluating the raster or providing a pre-baked texture,
        since evaluating the child ADT directly from the parent would produce better results.
    * As with the existing code, this layer should be free, i.e. symbol-based
      * Allows exotic interpretations like rasterizing into a texture,
        then feeding it into a shader rendering a shape ADT
        that would normally consume the rasterization as child data

 DONE: Evaluators have been factored out in favor of Modify subtypes that compose evaluable ADTs

* Formalize Combine behaviour
  * Boolean shouldn't care about any evaluation downstream of Distance
  * Instead, it should evaluate Distance, then call one of two functions
    * Downstream evaluations can be provided via EvaluateF::<D>::default().prefix(...)

 DONE: Combiners now take (A, B, C, FA, FB) where A / B are distance eval closures,
      FA / FB are full eval closures, and any composed functions (ex. Lt, Gt) are lifted to read from a context

* Distance + Color evaluation
  
  DONE: Color can be injected for a given field without needing domain impls,
        working as a passthrough w.r.t. boolean etc.

* R&D for proxy application
  * Semantically, this is a combine operation that
    evaluates shapes A and B, and replaces or blends
    some subset of shape B's context into shape A's context
  * In theory, this is a superset of distance boolean / bounding operators
    i.e. Replacing distance in the case of regular boolean,
         and blending it in the case of smooth boolean
    * Could generalize Boolean to arbitrary domain types, make combine functions composable
      * How to handle dragging the rest of the context through?
        * Seems like an additional semantic on top of the binary op
          i.e. whichever succeeds also brings the rest of its context

 DONE: Now iterating on solutions

* Refactor contexts to allow polymorphism
  
  DONE: All contexts can now freely morph their generic types

* Replace Shape subtypes with context move semantics
    * i.e. Context modifiers remove values from the context, then optionally replace them
    * Shape subtypes are the wrong abstraction for program correctness
      * Obstructs correct programs that involve wrappers, ex. Scale(...)
    * Program correctness should be enforced by Get<T> bounds in interpreters,
      rather than directly through EDSL types
    * Implementation:
      * Introduce a Moves associated type to ModifyFunction / DomainFunction,
        which is similar to Inputs, but specifies which types will be
        removed from the context before outputs are applied
      * This allows fanout copy semantics to be retained,
        which solves various dependency issues between domain functions
        (ex. explicit domain ordering)
      * In addition, multiple domain functions trying to move the same data
        will produce a compiler error, further strengthening the abstraction
      * Probably better to avoid introducing Moves,
        and instead create an aggregate list of types to remove
        * Enforces move semantics as standard, but avoids multiple-removes,
          or cases where one domain has to be authoritative over moving,
          thus invalidating the other domains if used in isolation.
        * How to do this?
          * Lack of negative impls makes it impossible to to 'is not'
            for an open set (i.e. trait implementors)
          * Best bet is probably to reuse the context's set-like properties,
            since it already contains type holes for all relevant data
            * Take an empty context (via a new Empty trait), set each input on it at the type level
              to produce a to-remove set type, then call Remove<T> on the input context once for each of its generic types
              * Missing types will no-op, on account of calling Remove<()>
              * Shouldn't be too hefty to introduce apply traits for sets
                i.e. ApplyRemove would remove all of set A's elements from set B,
                     ApplySet would insert them, and so on.
                * These seem like boolean operations - probably worth some research into the Set typeclass
                * Seems generalizable for convenience (i.e. map function F over sets A and B to produce set C)

  DONE: Implemented using Moves associated type to generate Remove closures
        However, still need to implement aggregation to prevent multiple removes;
        for now, distance impls move distance, others copy it

* Refactor Input / Field / Output into a unit Shape wrapper
  * No need to this semantic now context modifiers can move values

  DONE: Shape is now a singular unit type


* Combine ModifyFunction and DomainFunction
  * These have identical signatures, and all specialized implementation is currently
    managed by newtypes.
  * Can safely merge without affecting existing composition machinery.

  DONE: These have been combined into EvaluateFunction

* Elide Shape and Modify in favor of associated types on EvaluateFunction
  * Prime difference is the lifting semantic
    * Given a set of domains, Modify produces a single C -> C function
    * Given a set of domains, Shape fan-composes multiple functions into a single C -> C
    * For instance, a Modify(Set(Position(p))) creates one function that just cares about modifying position,
      whereas a Shape(Point) creates one function per domain w/context cloning + joining
      * Thusly, I / O modifiers like Translate would be better as Modify;
        since their impl is the same across all domains,
        fan-joining creates multiple identical computations, and is thus wasteful.

  DONE: Implemented Evaluable trait to model symbol -> lift strategy,
        LiftEvaluable trait to encode the lifting strategies themselves,
        and LiftNone / LiftModify / LiftDomains as concrete strategies
        for raw C -> C, context-lifted, and domain-lifted functions respectively.

* Implement remove aggregation for context move semantics
  * Identical removes within the same set of domain functions currently conflict,
    on account of trying to remove the same element twice.
  * This can be solved by using the set-like properties of context types
    to union together a to-remove context, which can then subtract itself from the
    input context

  DONE: Added self parameter to Empty to defer capturing context type until evaluation,
        setup domain lifting to create empty context, populate from Moved, and subtract from input context.

* Formalize wrapping operations
  * Operations that need control before and after child evaluation,
    or those that need a manual evaluation strategy
    ex. Scale requires a reciprocal multiply after shape evaluation for correctness
        Local differencing averages multiple evaluations
  * Implement as wrapper types that sit between Run and its subtypes
    ex. adt() << Scale(adt() << Circle(1.0) >> Done) >> Done
        adt() << DeriveNormals {
            shape: adt() << Circle(1.0) >> Done) >> Done,
            k: 0.01,
        }
  * Scale(Inner) should LiftAdt to Then(ScalePosition, Then(Inner, Then(InverseScaleDistance, AdtEnd)))

  DONE: Scale now acts as a pre/post wrapper around some other ADT items,
        provides a baseline example with the related traits

* Refactor so t_funk::set::Empty does not need a self parameter
  * Currently using to avoid capturing context type in evaluation lifting machinery
  * Will likely be able to create a specialized  intermediary function that takes self,
    and returns Self::empty()
  * Thinking about it, this should be a first-class macro abstraction in t-funk
    * Generate a FunctionNameC type that impls Closure and uses
      Self::function_name() to offload type reification to whatever it's called on
    * Useful for any typeclass method that takes no params, ex. Pure, Return, and so on

  DONE: Generated function structs with no inputs now take their receiver type
        in the argument position rather than as composed PhantomData.

* Create attribute macro to generate Set impls for a given struct
  
  DONE: Implemented via t_funk::macros::set::set

* Refactor Combine as a wrapper instead of a concrete ADT member
  * Take advantage of context execution machinery to apply blending operations
    * i.e. A, B and C types all hold ADT, instead of C being specialized to combine,
           and C ADT is used to manipulate a context of contexts
  * Use a supercontext to hold A / B contexts + final output context
    * All the same type, since this is value-level picking
    * FA, FB start as () and get populated via sub-evaluations,
      FO starts as C::empty() and gets populated with values from FA / FB
    * Should likely also hold K and blending factors, similar to existing distance-based SmoothBoolean impl
  * Core operations:
    * Evaluate - Evaluate a given set of domains on one or both children,
                 write into respective contexts.
                 Probably best as Evaluate<D, D> with an EvaluateBoth<D> alias for convenience
                 (This resembles a Bifunctor?)
    * Conditional - Pick between two operations based on context data
                    ex. The Get / Get -> Lt construct currently used by Union
    * Blend - Use a (T, T) -> T function to read from both contexts and write to the final context
              Can use Fst / Snd to copy directly into final context,
              a theoretical Lerp or other ops (hermite, curve evaluation, etc) for smooth blending
              (Note that curve evaluation is a 1D distance function - useful case for Param lifting)
    * Replace - Set the final context to A or B based on evaluation output
                ex. Dragging values through without needing to address them explicitly
  * Example high level operations:
    * Blend
      Evaluate both contexts in full, create final context via (T, T) -> T combiner functions
      Evaluate full set of domains on both contexts
      Use one binary function per member to write results into final context
    * Prepass
      Evaluate single domain on both contexts
      Use binary function to pick a context based on output
      Evaluate full set of domains on the chosen context
      Replace output context with chosen context
    * Bounding
      Evaluate a single domain on a single context
      Use unary function (ex. comparison with 0) to pick between constant infinite distance,
      and evaluating the other context in full
      (0 is technically an infinite field where every point is its surface,
       and const infinite is the same but with every point being infinitely far away.
       Inverse (i.e. always infinitely inside field) is also worth considering.
       Generalization possible?)
    * Pick (Optimization for to single-context evaluations, ex. distance boolean)
      Evaluate full set of domains on both contexts
      Use binary function to pick a context based on output
      Replace output context with chosen context

  ABANDONED: Not feasible with current framework:
             * Would need map semantics for context of contexts,
               since set semantics require knowing the full type in order to Get it,
               and context types change over the course of evaluation
             * Better to extend existing Combine framework for now,
               reconsider later down the line

* Consider eliding entire ADT and using HList instead
  * After the Combine refactor, ADT will just be a recursive list with Run-wrapped LHS
  * At that point, Run can be trivially elided, resulting in a simple recursive list
  * HList is more featureful, so would be a better foundation
    for future composition / interpretation improvements
  
  ABANDONED: Combine refactor is not happening, so this isn't feasible for the moment

* Consider further generalization for Boolean and SmoothBoolean
  * Combiner / blending functions should be (C, C) -> C rather than (C, C) -> bool

  DONE: Now separated into evaluation function and context combiners
        * Evaluation functions use the existing (A, B, C, FA, FB) signature and return a context
        * Boolean uses a (C, C) -> bool to pick between contexts
        * Blend uses a (C, C) -> T to calculate blending factor and a (C, C, T) -> C to combine contexts

* Consider composability for combination functions
  * Need to be able to define per-context-member combination strategies
    ex. Boolean distance, lerp color with k = 0.5, always take normal from left side, etc
  * Similar strategy to domain function composition
    * Fanout A / B contexts across lifted (C, C) -> C functions to create setters,
      compose setters, then apply setters to context
    * Seems like it may be generalizable in some sense,
      though the difference in signatures necessitates abstraction

  DONE: Now considering implementation

* Use an associated type to decouple Get input param from its output
  * Offloads set vs map semantics to implementor
  * Seems reasonable enough; maps are a specialization of sets,
    and there's enough implementation boilerplate that duplication should be avoided
  * Allows using tag types to avoid naming full value type,
    making GetT<T, U> more useful for bounds
    * Should open up the possibility of storing contexts in contexts for Combine generalization

  ABANDONED: Semantic doesn't hold when considering non-get operations
             Extended map instead, but unions don't work on maps unless you have a set of keys,
             so aren't viable for current purposes

* Generalize Combine
  * Needs a similar degree of expressibility to existing shape definition setup
    * i.e. A list of commands that can be composed with similar << syntax
           However, there's no need for Combine in this context, so a simple list would do
  * Using a context of contexts does not work due to fluid inner types
  * Given that some form of context is still necessary for storing things like K and blend factors,
    and that a super / sub relation is impractical, perhaps a sibling relation is viable
  * i.e. Using a separate context to store combine-specific data,
         accessible to participants via some separate parameter or specialized auto-lifting

  * Need to generalize explicit domain evaluation vs implicit
    * i.e. Manual lift-evaluate vs calling the inherited full-evaluate continuations
    * Perhaps use some tag type to signify "whatever the top-level eval is using"?
    * Resembles Evaluable; different ways to lift functions into some shared signature
      * In this case, the differentiator is which of the (A, B, C, FA, FB) params are required

  * Example cases:
    * Evaluate inherited for both, compare distance, return closer (Boolean Union without extra params)
    * Evaluate distance for both, compare, evaluate inherited for closer (Boolean Union with extra params)
    * Evaluate distance for left, compare with literal, evaluate inherited for right if true and return literal if false (Bounding)
    * Evaluate distance for both, compare, take some other param of whichever is closer (Proxy)
      * This implies a need for partial application; generate setter thunks for composing final output?
    * Various combinations of the above
      * Evaluate distance for both, calculate blend color (assuming color is domain-agnostic), pick closer, evaluate inherited, apply blend color
  
  * Based on the above, it seems similar to the existing evaluation machinery,
    but with extra specialization to handle building an output context from two input contexts
    instead of rebuilding around even higher level abstractions for greater generality
    * In comparison to shape, the A -> B move is a (C, C) -> C move, after which further evaluation may take place
      * To wit, that implies some (C, C) -> (C, C) operations as well as some C -> C operations
        * Though, C -> C is just regular ADT functionality; could use ADT expansion to inject after Combine

  DONE: Implemented using a specialized context based on the existing (A, B, F, FA, FB) data,
        with a C -> C function chaining approach and map semantics so participating functions
        can name their desired (likely fluid - contexts etc) data by slot instead of knowing its type.

* Switch from Cons to tuples now they have a monad interface
  * Can start moving in the direction of tuples for API composition
  * Eventually switch param + evaluate lifting to use FoldMap (i.e. Fmap -> Foldl)

  DONE: All uses of Cons are now tuple-based

* Split ADT expansion out from ADT lifting
  * Symbols like Circle aren't usable as-is, so expand to evaluable symbols inside LiftAdt
  * This is undesirable for type-based notation, where preserving the abstraction is preferable
  * Thus, this should be refactored as a LiftAdt-like trait (ex. ExpandAdt)
    * Existing instances lift as Run, then expand when the trait method is called as part of evaluation

  DONE: Implemented via Alias newtype and ExpandAlias trait,
        which is called after LiftAdt and LiftParam during evaluation

* Reconsider splitting Combine out of the ADT as a freestanding wrapper
  * How does this factor in now combine is refactored around a context approach?

  SKIPPED: Took the inverse approach of eliding Then

* Consider splitting ADT into discrete types
  * Practically the same as it is now,
    but with stronger module organization and no define_adt / impl_adt
  * Better semantically, since an ADT implies a closed set,
    when there's no reason it shouldn't be extensible by downstream code

  SKIPPED: Removing define_adt / impl_adt creates too much boilerplate,
           and the distinction is purely semantic, since it remains extensible in the same way.

* Finalize API
  * Should use tuples for heterogeneous lists wherever possible
  * Should share machinery between shape symbols and combine symbols

  DONE: Tuples are now the first-class monadic type, and lifting machinery has been
        generalized to the point where it can be used for both shapes and combinators

* ADT-ify combine functions
  * Currently using function composition, needs a higher-order symbol lifting approach
  * Should be able to represent as a simple list, compose via Monoid
    * Good example case for a prospective future ADT refactor

  DONE: Applied on a case-by-case basis; implementors can choose to
        implement on self or some other type, which is the important part.

* Reconsider Combine typeclass impls
  * Foldr / Foldl / Mappend should produce a single value for each Combine,
    rather than aggregating its A / B types as per Then.
  * To wit, Combine should call F(A, B) in order to produce this single value
    * Should allow for proper behaviour, possibly open the door to ADT-based evaluation
  * How to make this work for current usage?
    * Could make the combiner function a constructor for LiftEvaluateCombine

  DONE: Removed unused / invalid typeclass impls from AST newtypes

* Implement Replace combinator
  * Similar to Proxy, but overwrites a parameter unconditionally instead of predicating on distance

  DONE: Implemented as Proxy minus the final BooleanConditional


* Look into convenience functions for composing monadic structure
  * RepeatM etc, various utilities from Haskell's base libraries
  * Bare minimum, whatever is needed to recreate the diagrams example that inspired Elysian

  DONE: Implemented UnfoldM for creating monadic structure via function

* Implement elongate operator, Line alias

  DONE: Implemented as input modifier with abs switch for controlling origin

* Correct Triangle implementation
  * Distance output needs to account for vertex rounding
    * Instead of a plane, use a line and clamp Y to <= 0 to create a finite rounded plane
  * Reflect needs to be able to reflect gradients
    * Needs access to position, but has to occur after position is moved by shape
    * Either implement as a wrapper / evaluator, or preserve position
      * Preserving position breaks by-move semantics
        * However, an EvaluateInputs-implementing wrapper
          could be used to override moves on a case-by-case basis
          to account for situations where the move should be deferred

  DONE: Tried caching via context, but insufficient for arbitrarily nestable modifiers.
        Ended up implementing Reflect and Demanifold as wrapper evaluators, similar to Combine

* Color overlaying
  * Need to be able to assemble shapes front-to-back, with frontmost ones taking priority for color

  DONE: Implemented via Overlay alias

* Smooth color overlaying
  * Need to be able to smoothly blend between background and foreground
  * Since boolean version uses foreground distance < 0 as a predicate,
    should be able to control this by mapping it to a range.
    ex. -0.5 fg distance = full fg, 0.5 fg distance = full bg

  DONE: Implemented as SmoothOverlay, using the new UnaryConditional function

* Refactor IntoMonad instances to output 1-tuples
  * Allows mappend
  * Enables A, B -> ((A,), (B,)) -> (A, B) abstractions
    * ex. Prefixing position modifiers, suffixing distance modifiers
  * Probably better to take a monadic type and transparently
    Chain it into a 1-tuple, since that avoids locking down to a
    specific representation

* Trait-based application for modifier symbols
  * Set, Combine, Translate, Manifold, Isosurface, etc
  * Combine should take the RHS shape and combination subprogram
    * Should in theory allow ergonomic composition

* Monoid instances for combiner functions
  ex. Being able to use (foo, bar, baz).fmap(MakeUnion).mconcat()
      to fold a tuple of symbols into nested Combines
  * mconcat would output a Monadic type,
    so preferable that the surrounding systems are
    general enough to be able to use it directly
  * Potentially very powerful via a prospective MakeCombine monoid
    * Provide the combiner subprogram once, mconcat an arbitrary-length list with it

  DONE: Implemented as FoldCombine, MakeMonoidCombine, MonoidCombine

* Discretize combiner functions
  * Currently unergonomic for literal use, should be able to create abstractions
    to specialize around explicit per-domain blending

  DONE: Implemented EvaluatePredicated and EvaluateSelect to abstract
        over common functionality.
        In addition, settled on distance-only for smooth combiners,
        with other properties being dragged through via boolean
        for potential blending by downstream code

* Rust-GPU compatibility pass
  * Port diagrams example field into a shader

  DONE: Now rust-gpu compatible, but type-level metaprogramming causes IR explosion when compiled via rust-gpu

=======================================================================================================================

* Formalize interpretation of free structure
  * Existing type-level register machine behaviour is an interpreter
  * Could this be unified under Interpret and Interpreter traits?
    * Traversable is likely relevant here
  * Alternate interpreters:
    * Dynamic structuring
      * Convert ADT into a type-erased value-level equivalent (ex. dyn / impl Trait)
        * Useful for runtime editing,
          though may not be mandatory if strongly-typed recursive control flow is viable
    * EDSL graph visualizer
      * Create a new EDSL visualizing the graph as UI primitives
      * Seems like a mapping operation
    * Graph optimizer
    * Bevy hierarchy generator
      * Interpret boolean union as breaking a child out of its parent hierarchy
    * Static evaluation
      * Pre-evaluate expensive operations
        * ex. Layout:
          Replace a Combine<A, B, AxialFit> with Combine<Shape<Translate, A>, Shape<Translate, B>, Union>
          * Where AxialFit is semantically equivalent to raycast-based layout from Haskell diagrams
          * Code should be shareable between runtime and static evaluation

* Generalize blending
  * Need to investigate why PolynomialSmoothOverlay doesn't expand to an alias
    when used in monoid composition
  * Boolean, polynomial lerp, dither, noise, etc

* Crate structure pass
  * Bevy-style multi-crate setup

* Abstract over multi-frame evaluation
  * ex:
    Generating a series of images for ascii / viuer printing
    Generating an animated GIF for viuer printing
  * Can use a parameter function to retrieve time from context and parametrize
  * This is higher-order operation over image-generating contexts
    * Uses another distinct context of its own, likely containing a list / array of outputs

* Haskell diagrams R&D
  * Lots of food for thought in the documentation
    * https://archives.haskell.org/projects.haskell.org/diagrams/doc/quickstart.html
  * Local origins
  * Envelope-based layout
    * Alignment (i.e. envelope fit vs plane)
  * Snug fit via raymarching / binary search
  * Points
  * Segments
  * Lines
  * Splines
  * Loops
  * Trails
  * Paths
  * Arrows

* Investigate more idiomatic Raster -> ImageBuffer conversion
  * Currently similar to monadic chaining, but implemented manually
  * May be able to create typeclass impls for raster, imagebuffer and handle it that way
  * Semantically, this should move the raster

* Investigate type-level solution to move semantic aggregate removes
  * In theory should be achievable with no concrete instance of the
    to-remove set, since the type is the only relevant aspect for removal
    * Some closure that composes PhantomData<SetType> and wraps type arithmetic?

* Implement variadic Combine
  * Use a tuple to store a list of items to be folded over with the provided binary function
  * Either interpret directly, or expand into the existing nested structure
    * Interpreting directly is preferable, but may be difficult in practice due to specialized context impl
    * Expanding is compatible with existing structure, but less correct

* Investigate refactoring register machine interpreter into a State monad impl
  * Effectively equivalent - drags a state (i.e. context) through a chain of functions,
    which can be lifted to operate on the state
  * May need a StateT transformer to make this ergonomic
    * Maybe not - need to puzzle out the types involved and see what's ideal
  * If any notable code remains after refactor,
    it should be split into a free-standing register machine abstraction

* Simple lighting model for rendering 2D fields
  * Concrete case for use of normal and color

* UV domain, texture mapping machinery

* Improve functions macro
  * Should be able to cover all cases present in t-funk and elysian

* Improve set macro
  * Doesn't handle literal types (ex. String)
  * Doesn't handle generic types whose param count differs (ex. Image<P, PC>)

* Revisit autogenerated type suffixes
  * FooT conflicts with the T suffix for monad transformers
    * Perhaps better as FooR or FooO to indicate that it represents return / output

* Consider extending impl_adt! to resemble match syntax
  * pub struct Elysian {
        Foo | Bar | Baz => {
        } where
            Foo: Clone,
        Nil => {}
    }
  * Move existing Foo | Bar | Baz parse to the left of => and the corresponding impl to the right,
    parse multiple blocks
  * Unsure about where clause, needs to be per-block, but seems unergonomic

* Consider a define_typeclass! macro
  * Similar to define_adt!, but for traits instead of structs
  * Use trait syntax with 'typeclass' as the keyword,
    autogenerate an appropriately-named #[functions] #[types] trait + assoc type for each function

* Improve lift macro to use PhantomData for handling non-bound types
  * Still a valid Function impl, since a self receiver is not needed

* Better list abstraction for t-funk
  * Need a unified set of interfaces that can be implemented by HList and nested tuples
  * Ideally also regular tuples, though that may raise conflicts between approaches
  * Monadic chaining / typeclasses are the solution - can use to transmute freely between list types (i.e. HList, Tuple, TList)
    * Solution to interface conflicts is tuple transformers, i.e. newtypes
      * First-class tuple impl should be for flat tuples (1, 2, 3)
      * ex. TList((1, (2, (3, ())))) to apply HList-like semantics, TBTree for HBTree semantics, etc

* ADT parsing via nom
  * Opens the door to creating a specialized CLI REPL
